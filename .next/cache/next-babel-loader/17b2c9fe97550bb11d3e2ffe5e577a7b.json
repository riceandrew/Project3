{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\ricea\\\\ClassStuff\\\\practice\\\\React\\\\my-app\\\\components\\\\Map.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyDYz2JjXaniZAsJ0ZPDkUJ4XySzEn0B9vI\");\nGeocode.enableDebug();\n\nvar Map = /*#__PURE__*/function (_React$Component) {\n  _inherits(Map, _React$Component);\n\n  var _super = _createSuper(Map);\n\n  function Map(props) {\n    var _this;\n\n    _classCallCheck(this, Map);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"getCity\", function (addressArray) {\n      var city = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getArea\", function (addressArray) {\n      var area = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (var j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getState\", function (addressArray) {\n      var state = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        for (var _i = 0; _i < addressArray.length; _i++) {\n          if (addressArray[_i].types[0] && 'administrative_area_level_1' === addressArray[_i].types[0]) {\n            state = addressArray[_i].long_name;\n            return state;\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onInfoWindowClose\", function (event) {});\n\n    _defineProperty(_assertThisInitialized(_this), \"onMarkerDragEnd\", function (event) {\n      console.log('event', event);\n      var newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(function (response) {\n        var address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = _this.getCity(addressArray),\n            area = _this.getArea(addressArray),\n            state = _this.getState(addressArray);\n\n        _this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMarkerDragEnd\", function (event) {\n      console.log('event', event);\n      var newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(function (response) {\n        var address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = _this.getCity(addressArray),\n            area = _this.getArea(addressArray),\n            state = _this.getState(addressArray);\n\n        _this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPlaceSelected\", function (place) {\n      var address = place.formatted_address,\n          addressArray = place.address_components,\n          city = _this.getCity(addressArray),\n          area = _this.getArea(addressArray),\n          state = _this.getState(addressArray),\n          latValue = place.geometry.location.lat(),\n          lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n\n      _this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    });\n\n    _this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: _this.props.center.lat,\n        lng: _this.props.center.lng\n      },\n      markerPosition: {\n        lat: _this.props.center.lat,\n        lng: _this.props.center.lng\n      }\n    };\n    return _this;\n  }\n  /**\r\n    * Get the current address from the default map position and set those values in the state\r\n    */\n\n\n  _createClass(Map, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(function (response) {\n        var address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = _this2.getCity(addressArray),\n            area = _this2.getArea(addressArray),\n            state = _this2.getState(addressArray);\n\n        console.log('city', city, area, state);\n\n        _this2.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n\n    /**\r\n      * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n      *\r\n      * @param nextProps\r\n      * @param nextState\r\n      * @return {boolean}\r\n      */\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n        return true;\n      } else if (this.props.center.lat === nextProps.center.lat) {\n        return false;\n      }\n    }\n    /**\r\n      * Get the city and set the city input value to the one selected\r\n      *\r\n      * @param addressArray\r\n      * @return {string}\r\n      */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var AsyncMap = withScriptjs(withGoogleMap(function (props) {\n        return __jsx(GoogleMap, {\n          google: _this3.props.google,\n          defaultZoom: _this3.props.zoom,\n          defaultCenter: {\n            lat: _this3.state.mapPosition.lat,\n            lng: _this3.state.mapPosition.lng\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 6\n          }\n        });\n      }));\n      var map;\n\n      if (this.props.center.lat !== undefined) {\n        map = __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 10\n          }\n        }, __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 6\n          }\n        }, __jsx(\"div\", {\n          className: \"form-group\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 7\n          }\n        }, __jsx(\"label\", {\n          htmlFor: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 8\n          }\n        }, \"City\"), __jsx(\"input\", {\n          type: \"text\",\n          name: \"city\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.city,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 8\n          }\n        })), __jsx(\"div\", {\n          className: \"form-group\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 7\n          }\n        }, __jsx(\"label\", {\n          htmlFor: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 8\n          }\n        }, \"Area\"), __jsx(\"input\", {\n          type: \"text\",\n          name: \"area\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.area,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 8\n          }\n        })), __jsx(\"div\", {\n          className: \"form-group\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 7\n          }\n        }, __jsx(\"label\", {\n          htmlFor: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 8\n          }\n        }, \"State\"), __jsx(\"input\", {\n          type: \"text\",\n          name: \"state\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.state,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 8\n          }\n        })), __jsx(\"div\", {\n          className: \"form-group\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 7\n          }\n        }, __jsx(\"label\", {\n          htmlFor: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 8\n          }\n        }, \"Address\"), __jsx(\"input\", {\n          type: \"text\",\n          name: \"address\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.address,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 8\n          }\n        }))), __jsx(AsyncMap, {\n          googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDYz2JjXaniZAsJ0ZPDkUJ4XySzEn0B9vI&libraries=places\",\n          loadingElement: __jsx(\"div\", {\n            style: {\n              height: \"100%\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 8\n            }\n          }),\n          containerElement: __jsx(\"div\", {\n            style: {\n              height: this.props.height\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 8\n            }\n          }),\n          mapElement: __jsx(\"div\", {\n            style: {\n              height: \"100%\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 8\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 6\n          }\n        }));\n      } else {\n        map = __jsx(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 10\n          }\n        });\n      }\n\n      return map;\n    }\n  }]);\n\n  return Map;\n}(React.Component);\n\nexport default Map;","map":{"version":3,"sources":["C:/Users/ricea/ClassStuff/practice/React/my-app/components/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","enableDebug","Map","props","addressArray","city","i","length","types","long_name","area","j","state","event","setState","target","name","value","console","log","newLat","latLng","lat","newLng","lng","fromLatLng","then","response","address","results","formatted_address","address_components","getCity","getArea","getState","error","place","latValue","geometry","location","lngValue","markerPosition","mapPosition","center","nextProps","nextState","AsyncMap","google","zoom","map","undefined","onChange","height","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport Geocode from \"react-geocode\";\r\nGeocode.setApiKey(\"AIzaSyDYz2JjXaniZAsJ0ZPDkUJ4XySzEn0B9vI\");\r\nGeocode.enableDebug();\r\nclass Map extends React.Component{\r\nconstructor( props ){\r\n  super( props );\r\n  this.state = {\r\n   address: '',\r\n   city: '',\r\n   area: '',\r\n   state: '',\r\n   mapPosition: {\r\n    lat: this.props.center.lat,\r\n    lng: this.props.center.lng\r\n   },\r\n   markerPosition: {\r\n    lat: this.props.center.lat,\r\n    lng: this.props.center.lng\r\n}\r\n  }\r\n }\r\n/**\r\n  * Get the current address from the default map position and set those values in the state\r\n  */\r\n componentDidMount() {\r\n  Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\r\n   response => {\r\n    const address = response.results[0].formatted_address,\r\n     addressArray =  response.results[0].address_components,\r\n     city = this.getCity( addressArray ),\r\n     area = this.getArea( addressArray ),\r\n     state = this.getState( addressArray );\r\n  \r\n    console.log( 'city', city, area, state );\r\n  \r\n    this.setState( {\r\n     address: ( address ) ? address : '',\r\n     area: ( area ) ? area : '',\r\n     city: ( city ) ? city : '',\r\n     state: ( state ) ? state : '',\r\n    } )\r\n   },\r\n   error => {\r\n    console.error(error);\r\n   }\r\n  );\r\n };\r\n/**\r\n  * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n  *\r\n  * @param nextProps\r\n  * @param nextState\r\n  * @return {boolean}\r\n  */\r\n shouldComponentUpdate( nextProps, nextState ){\r\n  if (\r\n   this.state.markerPosition.lat !== this.props.center.lat ||\r\n   this.state.address !== nextState.address ||\r\n   this.state.city !== nextState.city ||\r\n   this.state.area !== nextState.area ||\r\n   this.state.state !== nextState.state\r\n  ) {\r\n   return true\r\n  } else if ( this.props.center.lat === nextProps.center.lat ){\r\n   return false\r\n  }\r\n }\r\n/**\r\n  * Get the city and set the city input value to the one selected\r\n  *\r\n  * @param addressArray\r\n  * @return {string}\r\n  */\r\n getCity = ( addressArray ) => {\r\n  let city = '';\r\n  for( let i = 0; i < addressArray.length; i++ ) {\r\n   if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\r\n    city = addressArray[ i ].long_name;\r\n    return city;\r\n   }\r\n  }\r\n };\r\n/**\r\n  * Get the area and set the area input value to the one selected\r\n  *\r\n  * @param addressArray\r\n  * @return {string}\r\n  */\r\n getArea = ( addressArray ) => {\r\n  let area = '';\r\n  for( let i = 0; i < addressArray.length; i++ ) {\r\n   if ( addressArray[ i ].types[0]  ) {\r\n    for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\r\n     if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\r\n      area = addressArray[ i ].long_name;\r\n      return area;\r\n     }\r\n    }\r\n   }\r\n  }\r\n };\r\n/**\r\n  * Get the address and set the address input value to the one selected\r\n  *\r\n  * @param addressArray\r\n  * @return {string}\r\n  */\r\n getState = ( addressArray ) => {\r\n  let state = '';\r\n  for( let i = 0; i < addressArray.length; i++ ) {\r\n   for( let i = 0; i < addressArray.length; i++ ) {\r\n    if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\r\n     state = addressArray[ i ].long_name;\r\n     return state;\r\n    }\r\n   }\r\n  }\r\n };\r\n/**\r\n  * And function for city,state and address input\r\n  * @param event\r\n  */\r\n onChange = ( event ) => {\r\n  this.setState({ [event.target.name]: event.target.value });\r\n };\r\n/**\r\n  * This Event triggers when the marker window is closed\r\n  *\r\n  * @param event\r\n  */\r\n onInfoWindowClose = ( event ) => {\r\n};\r\n\r\n/**\r\n  * When the marker is dragged you get the lat and long using the functions available from event object.\r\n  * Use geocode to get the address, city, area and state from the lat and lng positions.\r\n  * And then set those values in the state.\r\n  *\r\n  * @param event\r\n  */\r\n onMarkerDragEnd = ( event ) => {\r\n  console.log( 'event', event );\r\n  let newLat = event.latLng.lat(),\r\n   newLng = event.latLng.lng(),\r\n   addressArray = [];\r\nGeocode.fromLatLng( newLat , newLng ).then(\r\n   response => {\r\n    const address = response.results[0].formatted_address,\r\n     addressArray =  response.results[0].address_components,\r\n     city = this.getCity( addressArray ),\r\n     area = this.getArea( addressArray ),\r\n     state = this.getState( addressArray );\r\nthis.setState( {\r\n     address: ( address ) ? address : '',\r\n     area: ( area ) ? area : '',\r\n     city: ( city ) ? city : '',\r\n     state: ( state ) ? state : ''\r\n    } )\r\n   },\r\n   error => {\r\n    console.error(error);\r\n   }\r\n  );\r\n };\r\n\r\n/**\r\n  * When the marker is dragged you get the lat and long using the functions available from event object.\r\n  * Use geocode to get the address, city, area and state from the lat and lng positions.\r\n  * And then set those values in the state.\r\n  *\r\n  * @param event\r\n  */\r\n onMarkerDragEnd = ( event ) => {\r\n  console.log( 'event', event );\r\n  let newLat = event.latLng.lat(),\r\n   newLng = event.latLng.lng(),\r\n   addressArray = [];\r\nGeocode.fromLatLng( newLat , newLng ).then(\r\n   response => {\r\n    const address = response.results[0].formatted_address,\r\n     addressArray =  response.results[0].address_components,\r\n     city = this.getCity( addressArray ),\r\n     area = this.getArea( addressArray ),\r\n     state = this.getState( addressArray );\r\nthis.setState( {\r\n     address: ( address ) ? address : '',\r\n     area: ( area ) ? area : '',\r\n     city: ( city ) ? city : '',\r\n     state: ( state ) ? state : ''\r\n    } )\r\n   },\r\n   error => {\r\n    console.error(error);\r\n   }\r\n  );\r\n };\r\n\r\n  /**\r\n  * When the user types an address in the search box\r\n  * @param place\r\n  */\r\n onPlaceSelected = ( place ) => {\r\n  const address = place.formatted_address,\r\n     addressArray =  place.address_components,\r\n     city = this.getCity( addressArray ),\r\n     area = this.getArea( addressArray ),\r\n     state = this.getState( addressArray ),\r\n     latValue = place.geometry.location.lat(),\r\n     lngValue = place.geometry.location.lng();\r\n  // Set these values in the state.\r\n    this.setState({\r\n     address: ( address ) ? address : '',\r\n     area: ( area ) ? area : '',\r\n     city: ( city ) ? city : '',\r\n     state: ( state ) ? state : '',\r\n     markerPosition: {\r\n      lat: latValue,\r\n      lng: lngValue\r\n     },\r\n     mapPosition: {\r\n      lat: latValue,\r\n      lng: lngValue\r\n     },\r\n    })\r\n   };\r\n\r\nrender(){\r\nconst AsyncMap = withScriptjs(\r\n   withGoogleMap(\r\n    props => (\r\n     <GoogleMap google={this.props.google}\r\n      defaultZoom={this.props.zoom}\r\n      defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n     >\r\n</GoogleMap>\r\n)\r\n   )\r\n  );\r\nlet map;\r\n  if( this.props.center.lat !== undefined ) {\r\n   map = <div>\r\n     <div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">City</label>\r\n       <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">Area</label>\r\n       <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">State</label>\r\n       <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">Address</label>\r\n       <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\r\n      </div>\r\n     </div>\r\n     \r\n     <AsyncMap\r\n      googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDYz2JjXaniZAsJ0ZPDkUJ4XySzEn0B9vI&libraries=places\"\r\n      loadingElement={\r\n       <div style={{ height: `100%` }} />\r\n      }\r\n      containerElement={\r\n       <div style={{ height: this.props.height }} />\r\n      }\r\n      mapElement={\r\n       <div style={{ height: `100%` }} />\r\n      }\r\n     />\r\n    </div>\r\n} else {\r\n   map = <div style={{height: this.props.height}} />\r\n  }\r\n  return( map )\r\n }\r\n}\r\nexport default Map"]},"metadata":{},"sourceType":"module"}