{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ricea\\\\ClassStuff\\\\practice\\\\React\\\\my-app\\\\components\\\\Map.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyDYz2JjXaniZAsJ0ZPDkUJ4XySzEn0B9vI\");\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getCity\", addressArray => {\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    });\n\n    _defineProperty(this, \"getArea\", addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"getState\", addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"onChange\", event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onInfoWindowClose\", event => {});\n\n    _defineProperty(this, \"onMarkerDragEnd\", event => {\n      console.log('event', event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, error => {\n        console.error(error);\n      });\n    });\n\n    _defineProperty(this, \"onMarkerDragEnd\", event => {\n      console.log('event', event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, error => {\n        console.error(error);\n      });\n    });\n\n    _defineProperty(this, \"onPlaceSelected\", place => {\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    });\n\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\r\n    * Get the current address from the default map position and set those values in the state\r\n    */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log('city', city, area, state);\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\r\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n    *\r\n    * @param nextProps\r\n    * @param nextState\r\n    * @return {boolean}\r\n    */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\r\n    * Get the city and set the city input value to the one selected\r\n    *\r\n    * @param addressArray\r\n    * @return {string}\r\n    */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => __jsx(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 6\n      }\n    })));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 10\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 6\n        }\n      }, __jsx(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 7\n        }\n      }, __jsx(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 8\n        }\n      }, \"City\"), __jsx(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.city,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 8\n        }\n      })), __jsx(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 7\n        }\n      }, __jsx(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 8\n        }\n      }, \"Area\"), __jsx(\"input\", {\n        type: \"text\",\n        name: \"area\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.area,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 8\n        }\n      })), __jsx(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 7\n        }\n      }, __jsx(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 8\n        }\n      }, \"State\"), __jsx(\"input\", {\n        type: \"text\",\n        name: \"state\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.state,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 8\n        }\n      })), __jsx(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 7\n        }\n      }, __jsx(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 8\n        }\n      }, \"Address\"), __jsx(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 8\n        }\n      }))), __jsx(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDYz2JjXaniZAsJ0ZPDkUJ4XySzEn0B9vI&libraries=places\",\n        loadingElement: __jsx(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 8\n          }\n        }),\n        containerElement: __jsx(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 8\n          }\n        }),\n        mapElement: __jsx(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 8\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 6\n        }\n      }));\n    } else {\n      map = __jsx(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 10\n        }\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["C:/Users/ricea/ClassStuff/practice/React/my-app/components/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","enableDebug","Map","Component","constructor","props","addressArray","city","i","length","types","long_name","area","j","state","event","setState","target","name","value","console","log","newLat","latLng","lat","newLng","lng","fromLatLng","then","response","address","results","formatted_address","address_components","getCity","getArea","getState","error","place","latValue","geometry","location","lngValue","markerPosition","mapPosition","center","componentDidMount","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","map","undefined","onChange","height"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport Geocode from \"react-geocode\";\r\nGeocode.setApiKey(\"AIzaSyDYz2JjXaniZAsJ0ZPDkUJ4XySzEn0B9vI\");\r\nGeocode.enableDebug();\r\nclass Map extends React.Component{\r\nconstructor( props ){\r\n  super( props );\r\n  this.state = {\r\n   address: '',\r\n   city: '',\r\n   area: '',\r\n   state: '',\r\n   mapPosition: {\r\n    lat: this.props.center.lat,\r\n    lng: this.props.center.lng\r\n   },\r\n   markerPosition: {\r\n    lat: this.props.center.lat,\r\n    lng: this.props.center.lng\r\n}\r\n  }\r\n }\r\n/**\r\n  * Get the current address from the default map position and set those values in the state\r\n  */\r\n componentDidMount() {\r\n  Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\r\n   response => {\r\n    const address = response.results[0].formatted_address,\r\n     addressArray =  response.results[0].address_components,\r\n     city = this.getCity( addressArray ),\r\n     area = this.getArea( addressArray ),\r\n     state = this.getState( addressArray );\r\n  \r\n    console.log( 'city', city, area, state );\r\n  \r\n    this.setState( {\r\n     address: ( address ) ? address : '',\r\n     area: ( area ) ? area : '',\r\n     city: ( city ) ? city : '',\r\n     state: ( state ) ? state : '',\r\n    } )\r\n   },\r\n   error => {\r\n    console.error(error);\r\n   }\r\n  );\r\n };\r\n/**\r\n  * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n  *\r\n  * @param nextProps\r\n  * @param nextState\r\n  * @return {boolean}\r\n  */\r\n shouldComponentUpdate( nextProps, nextState ){\r\n  if (\r\n   this.state.markerPosition.lat !== this.props.center.lat ||\r\n   this.state.address !== nextState.address ||\r\n   this.state.city !== nextState.city ||\r\n   this.state.area !== nextState.area ||\r\n   this.state.state !== nextState.state\r\n  ) {\r\n   return true\r\n  } else if ( this.props.center.lat === nextProps.center.lat ){\r\n   return false\r\n  }\r\n }\r\n/**\r\n  * Get the city and set the city input value to the one selected\r\n  *\r\n  * @param addressArray\r\n  * @return {string}\r\n  */\r\n getCity = ( addressArray ) => {\r\n  let city = '';\r\n  for( let i = 0; i < addressArray.length; i++ ) {\r\n   if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\r\n    city = addressArray[ i ].long_name;\r\n    return city;\r\n   }\r\n  }\r\n };\r\n/**\r\n  * Get the area and set the area input value to the one selected\r\n  *\r\n  * @param addressArray\r\n  * @return {string}\r\n  */\r\n getArea = ( addressArray ) => {\r\n  let area = '';\r\n  for( let i = 0; i < addressArray.length; i++ ) {\r\n   if ( addressArray[ i ].types[0]  ) {\r\n    for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\r\n     if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\r\n      area = addressArray[ i ].long_name;\r\n      return area;\r\n     }\r\n    }\r\n   }\r\n  }\r\n };\r\n/**\r\n  * Get the address and set the address input value to the one selected\r\n  *\r\n  * @param addressArray\r\n  * @return {string}\r\n  */\r\n getState = ( addressArray ) => {\r\n  let state = '';\r\n  for( let i = 0; i < addressArray.length; i++ ) {\r\n   for( let i = 0; i < addressArray.length; i++ ) {\r\n    if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\r\n     state = addressArray[ i ].long_name;\r\n     return state;\r\n    }\r\n   }\r\n  }\r\n };\r\n/**\r\n  * And function for city,state and address input\r\n  * @param event\r\n  */\r\n onChange = ( event ) => {\r\n  this.setState({ [event.target.name]: event.target.value });\r\n };\r\n/**\r\n  * This Event triggers when the marker window is closed\r\n  *\r\n  * @param event\r\n  */\r\n onInfoWindowClose = ( event ) => {\r\n};\r\n\r\n/**\r\n  * When the marker is dragged you get the lat and long using the functions available from event object.\r\n  * Use geocode to get the address, city, area and state from the lat and lng positions.\r\n  * And then set those values in the state.\r\n  *\r\n  * @param event\r\n  */\r\n onMarkerDragEnd = ( event ) => {\r\n  console.log( 'event', event );\r\n  let newLat = event.latLng.lat(),\r\n   newLng = event.latLng.lng(),\r\n   addressArray = [];\r\nGeocode.fromLatLng( newLat , newLng ).then(\r\n   response => {\r\n    const address = response.results[0].formatted_address,\r\n     addressArray =  response.results[0].address_components,\r\n     city = this.getCity( addressArray ),\r\n     area = this.getArea( addressArray ),\r\n     state = this.getState( addressArray );\r\nthis.setState( {\r\n     address: ( address ) ? address : '',\r\n     area: ( area ) ? area : '',\r\n     city: ( city ) ? city : '',\r\n     state: ( state ) ? state : ''\r\n    } )\r\n   },\r\n   error => {\r\n    console.error(error);\r\n   }\r\n  );\r\n };\r\n\r\n/**\r\n  * When the marker is dragged you get the lat and long using the functions available from event object.\r\n  * Use geocode to get the address, city, area and state from the lat and lng positions.\r\n  * And then set those values in the state.\r\n  *\r\n  * @param event\r\n  */\r\n onMarkerDragEnd = ( event ) => {\r\n  console.log( 'event', event );\r\n  let newLat = event.latLng.lat(),\r\n   newLng = event.latLng.lng(),\r\n   addressArray = [];\r\nGeocode.fromLatLng( newLat , newLng ).then(\r\n   response => {\r\n    const address = response.results[0].formatted_address,\r\n     addressArray =  response.results[0].address_components,\r\n     city = this.getCity( addressArray ),\r\n     area = this.getArea( addressArray ),\r\n     state = this.getState( addressArray );\r\nthis.setState( {\r\n     address: ( address ) ? address : '',\r\n     area: ( area ) ? area : '',\r\n     city: ( city ) ? city : '',\r\n     state: ( state ) ? state : ''\r\n    } )\r\n   },\r\n   error => {\r\n    console.error(error);\r\n   }\r\n  );\r\n };\r\n\r\n  /**\r\n  * When the user types an address in the search box\r\n  * @param place\r\n  */\r\n onPlaceSelected = ( place ) => {\r\n  const address = place.formatted_address,\r\n     addressArray =  place.address_components,\r\n     city = this.getCity( addressArray ),\r\n     area = this.getArea( addressArray ),\r\n     state = this.getState( addressArray ),\r\n     latValue = place.geometry.location.lat(),\r\n     lngValue = place.geometry.location.lng();\r\n  // Set these values in the state.\r\n    this.setState({\r\n     address: ( address ) ? address : '',\r\n     area: ( area ) ? area : '',\r\n     city: ( city ) ? city : '',\r\n     state: ( state ) ? state : '',\r\n     markerPosition: {\r\n      lat: latValue,\r\n      lng: lngValue\r\n     },\r\n     mapPosition: {\r\n      lat: latValue,\r\n      lng: lngValue\r\n     },\r\n    })\r\n   };\r\n\r\nrender(){\r\nconst AsyncMap = withScriptjs(\r\n   withGoogleMap(\r\n    props => (\r\n     <GoogleMap google={this.props.google}\r\n      defaultZoom={this.props.zoom}\r\n      defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n     >\r\n</GoogleMap>\r\n)\r\n   )\r\n  );\r\nlet map;\r\n  if( this.props.center.lat !== undefined ) {\r\n   map = <div>\r\n     <div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">City</label>\r\n       <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">Area</label>\r\n       <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">State</label>\r\n       <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">Address</label>\r\n       <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\r\n      </div>\r\n     </div>\r\n     \r\n     <AsyncMap\r\n      googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDYz2JjXaniZAsJ0ZPDkUJ4XySzEn0B9vI&libraries=places\"\r\n      loadingElement={\r\n       <div style={{ height: `100%` }} />\r\n      }\r\n      containerElement={\r\n       <div style={{ height: this.props.height }} />\r\n      }\r\n      mapElement={\r\n       <div style={{ height: `100%` }} />\r\n      }\r\n     />\r\n    </div>\r\n} else {\r\n   map = <div style={{height: this.props.height}} />\r\n  }\r\n  return( map )\r\n }\r\n}\r\nexport default Map"]},"metadata":{},"sourceType":"module"}